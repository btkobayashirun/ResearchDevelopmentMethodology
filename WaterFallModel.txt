ウォータフォールモデル

・概要
　ソフトウェア開発の手法において古くから存在し、ポピュラーな手法。
　要件定義、外部設計、内部設計、開発、テスト、運用、などの作業工程を
　一度で終わらせられるように計画し管理する。
　各工程で成果物が発生し、それぞれの工程は前工程の成果物を基に作業が行われる。
　そのため、原則として前工程が終了したあとに、次工程に進む。
　
　ウォーターフォールモデルの別名として「V字型モデル」という呼ばれ方もある。
　要件定義を左上として開発を中心に折り返し右上に向かって複数のテストを配置することでV字型を形成する。
　V字型の同じ高さにある開発までの各段階と開発後の各テストが対応しており、
　テストによって要件定義、設計の品質を確認、検証する。
　
・メリット
　・ポピュラーなため説明せずとも開発プロセスを理解してもらえる
　・成果物が確実に残る
　・進捗を管理しやすい

・デメリット
　・手戻りが起こることを考慮していないため、要件定義の変更などが起こると遅延や予算超過の原因になる。
　・成果物ありきな開発手法なため成果物の作成や修正の稼動に負荷が掛かる。

・向き、不向き
　成果物の作成が各工程で必要なことから、大量の成果物が必要になってくる大規模開発には向いていない。
　小規模かつ、要件がしっかりと定まっているプロジェクトならば成果物の作成の負担が少なく、
　手戻りも起こりにくいため、メリットを活かしやすいため向いていると言える。

・自分の意見
　ウォーターフォールモデルでの開発は学生時代に行ったことがあるが、たび重なる要件の変更と納期がきつかったことから
　設計書などを書き直す余裕もなく、最終的に行き当たりばったりな開発になっていた。
　このことから、要件が完全に固まっているか、納期に余裕があってバッファを多めに取れる状況以外では他の開発手法を
　採用するほうがいいと思っている。
　
　もし、ウォーターフォールモデルを採用するのならば必要な要件を不足なく洗い出す必要があるので要件定義の時間を多めに
　取る必要があると思う。
　要件定義の時間を掛けても要件の変更は起こりえるものだと思うので、設計をする際にはあらかじめ拡張性を持たせたり、
　各部分の依存性を低くすることで、変更が起こったときの対応量を小さくする工夫が必要になるとも思う。


・参照
　https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB%E3%83%BB%E3%83%A2%E3%83%87%E3%83%AB
　http://itpro.nikkeibp.co.jp/article/lecture/20061130/255501/?rt=nocnt
　http://www.linuxacademy.ne.jp/lablog/programmer/98/
　http://system-project.info/water_fall_merit_demerit.html